INTRODUÇÃO

Um sistema pode ser definido como a combinação de elementos interagentes organizados para atingir um ou mais objetivos declarados [1]. A configuração de um sistema é as características funcionais e físicas do hardware ou software, tal como estabelecidas na documentação técnica ou obtidas num produto [1]; Ele também pode ser considerado como uma coleção de versões específicas de hardware, firmware ou itens de software combinados de acordo com procedimentos de compilação específicos para atender a uma finalidade específica. O gerenciamento de configuração (CM) é, então, a disciplina de identificar a configuração de um sistema em pontos distintos no tempo, com a finalidade de controlar sistematicamente as mudanças na configuração e manter a integridade e rastreabilidade da configuração ao longo do ciclo de vida do sistema. É formalmente definido como:

Uma disciplina que aplique orientação técnica e administrativa e vigilância para: identificar e documentar as características funcionais e físicas de um item de configuração, controlar mudanças nessas características, registrar e relatar o processamento de mudanças e o status de implementação e verificar a conformidade com os requisitos especificados. [1]

O gerenciamento de configuração de software (SCM) é um processo de ciclo de vida do software de suporte que beneficia a gestão de projetos, atividades de desenvolvimento e manutenção, atividades de garantia de qualidade, bem como os clientes e usuários do produto final.

Os conceitos de gerenciamento de configuração se aplicam a todos os itens a serem controlados, embora existam algumas diferenças na implementação entre hardware CM e software CM.

SCM está intimamente relacionado com a atividade de garantia de qualidade de software (SQA). Conforme definido na área de conhecimento de Qualidade de Software (KA), os processos SQA garantem que os produtos e processos de software no ciclo de vida do projeto estão em conformidade com seus requisitos especificados, planejando, implementando e executando um conjunto de atividades para fornecer confiança adequada de que a qualidade está sendo incorporado no software. As atividades de SCM ajudam na realização destes objetivos de SQA. Em alguns contextos de projeto, os requisitos específicos de SQA prescrevem certas atividades de SCM.

[ Figura 6.1. Repartição de Tópicos para a Gestão de Configuração de Software KA ]

As atividades de SCM são gerenciamento e planejamento do processo SCM, identificação de configuração de software, controle de configuração de software, contabilidade de status de configuração de software, auditoria de configuração de software e gerenciamento e entrega de release de software.

O Software Configuration Management KA está relacionado a todos os outros KAs, uma vez que o objeto de gerenciamento de configuração é o artefato produzido e usado ao longo do processo de engenharia de software.

DISTRIBUIÇÃO DE TEMAS PARA GESTÃO DE CONFIGURAÇÃO DE SOFTWARE

A divisão de tópicos para o KA de Gerenciamento de Configuração de Software é mostrada na Figura 6.1.

1. Gestão do Processo do SCM

A SCM controla a evolução e a integridade de um produto identificando seus elementos; Gerenciar e controlar a mudança; E verificar, registrar e relatar informações de configuração. Do ponto de vista do engenheiro de software, o SCM facilita atividades de desenvolvimento e mudança de implementação. Uma implementação bem-sucedida do SCM requer planejamento e gerenciamento cuidadoso. Isto, por sua vez, requer uma compreensão do contexto organizacional e das restrições impostas à concepção e implementação do processo de SCM.

1.1. Contexto organizacional para SCM
[2 *, c6, ann. D] [3 *, introdução] [4 *, c29]

Para planejar um processo SCM para um projeto, é necessário entender o contexto organizacional e as relações entre os elementos organizacionais. O SCM interage com várias outras atividades ou elementos organizacionais.

Os elementos organizacionais responsáveis ​​pelos processos de suporte à engenharia de software podem ser estruturados de várias maneiras. Embora a responsabilidade pela execução de determinadas tarefas do SCM possa ser atribuída a outras partes da organização (como a organização de desenvolvimento), a responsabilidade geral do SCM depende muitas vezes de um elemento organizacional distinto ou de um indivíduo designado.

O software é freqüentemente desenvolvido como parte de um sistema maior contendo elementos de hardware e firmware. Nesse caso, as atividades do SCM ocorrem paralelamente às atividades do hardware e do firmware CM e devem ser consistentes com o CM do nível do sistema. Observe que o firmware contém hardware e software; Portanto, ambos os conceitos de CM de hardware e software são aplicáveis.

O SCM pode interagir com a atividade de garantia de qualidade de uma organização em questões como o gerenciamento de registros e itens não conformes. Em relação ao primeiro, alguns itens sob controle do SCM também podem ser registros de projetos sujeitos a provisões do programa de garantia de qualidade da organização. Gerenciar itens não-conformes geralmente é responsabilidade da atividade de garantia de qualidade; No entanto, o SCM pode auxiliar no rastreamento e no relato de itens de configuração de software pertencentes a esta categoria.

Talvez o relacionamento mais próximo seja com as organizações de desenvolvimento e manutenção de software. É nesse contexto que muitas das tarefas de controle de configuração de software são conduzidas. Freqüentemente, as mesmas ferramentas suportam desenvolvimento, manutenção e objetivos de SCM.

1.2. Restrições e Orientações para o Processo SCM
[2 *, c6, ann. D, ann. E] [3 *, c2, c5] [5 *, c19s2.2]

As restrições que afetam e orientam o processo de SCM vêm de várias fontes. As políticas e procedimentos estabelecidos em níveis corporativos ou outros níveis organizacionais podem influenciar ou prescrever a concepção e implementação do processo SCM para um determinado projeto. Além disso, o contrato entre o adquirente eo fornecedor pode conter disposições que afectem o processo do SCM. Por exemplo, certas auditorias de configuração podem ser necessárias, ou pode ser especificado que determinados itens sejam colocados em CM. Quando os produtos de software a serem desenvolvidos têm o potencial de afetar a segurança pública, os órgãos reguladores externos podem impor restrições. Finalmente, o processo de ciclo de vida de software específico escolhido para um projeto de software e o nível de formalismo selecionado para implementar o software afetam a concepção e implementação do processo SCM.

As orientações para a concepção e implementação de um processo de SCM também podem ser obtidas a partir de "melhores práticas", conforme reflectido nas normas sobre engenharia de software emitidas pelas várias organizações de normalização (ver Apêndice B sobre normas).

1.3. Planejamento para SCM
[2 *, c6, ann. D, ann. E] [3 *, c23] [4 *, c29]

O planejamento de um processo de SCM para um determinado projeto deve ser consistente com o contexto organizacional, restrições aplicáveis, orientação comumente aceita e natureza do projeto (por exemplo, tamanho, criticalidade de segurança e segurança). As principais atividades abrangidas são a identificação de configuração de software, controle de configuração de software, contabilidade de status de configuração de software, auditoria de configuração de software e gerenciamento e entrega de release de software. Além disso, questões como organização e responsabilidades, recursos e horários, seleção e implementação de ferramentas, controle de fornecedores e subcontratados e controle de interfaces são tipicamente considerados. Os resultados da atividade de planejamento são registrados em um Plano de SCM (SCMP), que normalmente está sujeito à revisão e auditoria de SQA.

As estratégias de ramificação e fusão devem ser cuidadosamente planejadas e comunicadas, uma vez que elas afetam muitas atividades do SCM. Do ponto de vista SCM, um ramo é definido como um conjunto de versões de arquivo fonte em desenvolvimento [1]. A fusão consiste em combinar diferentes alterações no mesmo arquivo [1]. Isso normalmente ocorre quando mais de uma pessoa altera um item de configuração. Existem muitas estratégias de ramificação e fusão em uso comum (consulte a seção Leituras Adicionais para discussão adicional).

O modelo de ciclo de vida de desenvolvimento de software (consulte Modelos de Ciclo de Vida de Software no Processo de Engenharia de Software KA) também afeta atividades de SCM eo planejamento de SCM deve levar isso em conta. Por exemplo, a integração contínua é uma prática comum em muitas abordagens de desenvolvimento de software. É normalmente caracterizada por freqüentes build-test-deploy ciclos. As actividades do SCM devem ser planeadas em conformidade.

1.3.1. Organização e Responsabilidades do SCM
[2 *, ann. Ds5, ann. Ds6] [3 *, c10-11] [4 *, introdução, c29]

Para evitar confusão sobre quem executará determinadas atividades ou tarefas do SCM, os papéis organizacionais a serem envolvidos no processo do SCM precisam ser claramente identificados. As responsabilidades específicas para determinadas atividades ou tarefas de SCM também precisam ser atribuídas a entidades organizacionais, por título ou por elemento organizacional. A autoridade geral e os canais de comunicação de SCM também devem ser identificados, embora isso possa ser realizado na fase de planejamento de gerenciamento de projetos ou de garantia de qualidade.

1.3.2. Recursos e horários do SCM
[2 *, ann. Ds8] [3 *, c23]

O planejamento do SCM identifica o pessoal e as ferramentas envolvidas na realização das atividades e tarefas do SCM. Ele aborda as questões de programação, estabelecendo seqüências necessárias de tarefas SCM e identificando suas relações com os cronogramas do projeto e os marcos estabelecidos na fase de planejamento do gerenciamento do projeto. Quaisquer requisitos de formação necessários para a implementação dos planos e formação de novos membros do pessoal também são especificados.

1.3.3. Seleção e implementação de ferramentas
[3 *, c26s2, c26s6] [4 *, c29s5]

Como para qualquer área de engenharia de software, a seleção e implementação de ferramentas SCM deve ser cuidadosamente planejada. As seguintes perguntas devem ser consideradas:

• Organização: o que motiva a aquisição de ferramentas de uma perspectiva organizacional?

• Ferramentas: podemos usar ferramentas comerciais ou desenvolvê-las?

• Ambiente: quais são as restrições impostas pela organização e seu contexto técnico?

• Legado: como os projetos usarão (ou não) as novas ferramentas?

• Financiamento: quem pagará pela aquisição, manutenção, treinamento e customização das ferramentas?

• Escopo: como as novas ferramentas serão implementadas - por exemplo, através de toda a organização ou apenas em projetos específicos?

• Propriedade: quem é responsável pela introdução de novas ferramentas?

• Futuro: qual é o plano para o uso das ferramentas no futuro?

• Mudança: quão adaptáveis ​​são as ferramentas?

• Ramificação e fusão: as capacidades das ferramentas são compatíveis com as estratégias de ramificação e fusão planejadas?

• Integração: as diversas ferramentas SCM se integram entre si? Com outras ferramentas em uso na organização?

• Migração: o repositório mantido pela ferramenta de controle de versão pode ser portado para outra ferramenta de controle de versão enquanto mantém o histórico completo dos itens de configuração que ele contém?

O SCM geralmente requer um conjunto de ferramentas, ao contrário de uma única ferramenta. Esses conjuntos de ferramentas são por vezes referidos como bancos de trabalho. Nesse contexto, outra consideração importante no planejamento da seleção de ferramentas é determinar se o banco de trabalho do SCM estará aberto (ou seja, ferramentas de diferentes fornecedores serão usadas em diferentes atividades do processo do SCM) ou integradas (onde elementos do workbench são projetados para trabalhar juntos).

O tamanho da organização e o tipo de projetos envolvidos também podem afetar a seleção de ferramentas (consulte o tópico 7, Ferramentas de gerenciamento de configuração de software).

1.3.4. Controle Fornecedor / Subcontratado
[2 *, c13] [3 *, c13s9, c14s2]

Um projeto de software pode adquirir ou fazer uso de produtos de software comprados, como compiladores ou outras ferramentas. O planejamento do SCM considera se e como esses itens serão tomados sob o controle de configuração (por exemplo, integrados nas bibliotecas do projeto) e como as alterações ou atualizações serão avaliadas e gerenciadas.

Considerações semelhantes aplicam-se a software subcontratado. Ao usar software subcontratado, tanto os requisitos de SCM a serem impostos ao processo de SCM do subcontratado como parte do subcontrato e os meios para monitorar o cumprimento precisam ser estabelecidos. O último inclui a consideração de quais informações SCM devem estar disponíveis para o monitoramento efetivo de conformidade.

1.3.5. Controle de Interface
[2 *, c12] [3 *, c24s4]

Quando um item de software interage com outro software ou item de hardware, uma
Para qualquer item pode afetar o outro. O planejamento para o processo SCM considera como os itens de interface serão identificados e como as alterações nos itens serão gerenciadas e comunicadas. A função SCM pode ser parte de um processo maior de nível de sistema para especificação e controle de interface; Pode envolver especificações de interface, planos de controle de interface e documentos de controle de interface. Nesse caso, o planejamento do SCM para controle de interface ocorre no contexto do processo no nível do sistema.

1.4. Plano SCM
[2 *, ann. D] [3 *, c23] [4 *, c29s1]

Os resultados do planejamento de SCM para um determinado projeto são registrados em um plano de gerenciamento de configuração de software (SCMP), um "documento vivo" que serve como uma referência para o processo de SCM. Ele é mantido (isto é, atualizado e aprovado) conforme necessário durante o ciclo de vida do software. Na implementação do SCMP, é tipicamente necessário desenvolver uma série de procedimentos mais detalhados e subordinados, definindo como os requisitos específicos serão realizados durante as atividades do dia-a-dia - por exemplo, quais estratégias de ramificação serão usadas e com que freqüência as builds ocorrerão e Testes automatizados de todos os tipos são executados.

As orientações sobre a criação e manutenção de um SCMP, com base nas informações produzidas pela atividade de planejamento, estão disponíveis de várias fontes, como [2 *]. Esta referência fornece requisitos para as informações a serem contidas em um SCMP; Ele também define e descreve seis categorias de informações SCM a serem incluídas em um SCMP:

• Introdução (finalidade, âmbito, termos utilizados)

• Gerenciamento de SCM (organização, responsabilidades, autoridades, políticas, diretrizes e procedimentos aplicáveis)

• Atividades SCM (identificação de configuração, controle de configuração, e assim por diante)

• Programações SCM (coordenação com outras atividades do projeto)

• Recursos do SCM (ferramentas, recursos físicos e recursos humanos)

• Manutenção do SCMP.

1.5. Vigilância de Gerenciamento de Configuração de Software
[3 *, c11s3]

Após a implementação do processo de SCM, pode ser necessário algum grau de vigilância para assegurar que as disposições do SCMP sejam devidamente aplicadas. É provável que existam requisitos específicos da SQA para garantir a conformidade com processos e procedimentos específicos da SCM. A pessoa responsável pela SCM assegura que
Aqueles com a responsabilidade atribuída executar as tarefas SCM definidas corretamente. A autoridade de garantia de qualidade do software, como parte de uma atividade de auditoria de conformidade, também pode executar essa vigilância.

O uso de ferramentas SCM integradas com capacidade de controle de processo pode facilitar a tarefa de vigilância. Algumas ferramentas facilitam a conformidade do processo, ao mesmo tempo em que fornecem flexibilidade ao engenheiro de software para adaptar os procedimentos. Outras ferramentas reforçam o processo, deixando o engenheiro de software com menos flexibilidade. As exigências de vigilância e o nível de flexibilidade a ser fornecido ao engenheiro de software são considerações importantes
Na seleção da ferramenta.

1.5.1. Medidas e Medidas de SCM
[3 *, c9s2, c25s2-s3]

As medidas de SCM podem ser projetadas para fornecer informações específicas sobre o produto em desenvolvimento ou para fornecer insights sobre o funcionamento do processo de SCM. Um objetivo relacionado de monitorar o processo de SCM é descobrir oportunidades para melhoria de processos. As medições de processos de SCM fornecem um bom meio para monitorar a eficácia das atividades de SCM em uma base contínua. Estas medições são úteis na caracterização do estado actual do processo, bem como no fornecimento de uma base para fazer comparações ao longo do tempo. A análise das medições pode produzir insights que levam a mudanças de processo e atualizações correspondentes ao SCMP.

As bibliotecas de software e os diversos recursos da ferramenta SCM fornecem fontes para extrair informações sobre as características do processo SCM (bem como fornecer informações de projeto e de gerenciamento). Por exemplo, informações sobre o tempo necessário para realizar vários tipos de mudanças seriam úteis na avaliação dos critérios para determinar quais níveis de autoridade são os melhores para autorizar certos tipos de mudanças e para estimar mudanças futuras.

Deve-se ter cuidado para manter o foco da vigilância sobre os insights que podem ser obtidos a partir das medições, e não nas próprias medições. A discussão do processo do software e da medição do produto é apresentada no Processo de Engenharia de Software KA. Os programas de medição de software são descritos na Software Engineering Management KA.

1.5.2. Auditorias em Processo do SCM
[3 *, c1s1]

As auditorias podem ser realizadas durante o processo de engenharia de software para investigar o status atual de elementos específicos da configuração ou para avaliar a implementação do processo SCM. A auditoria em processo do SCM fornece um mecanismo mais formal para monitorar aspectos selecionados do processo e pode ser coordenada com a função SQA (consulte o tópico 5, Auditoria de Configuração de Software).

2. Identificação da configuração do software
[2 *, c8] [4 *, c29s1.1]

A identificação da configuração de software identifica itens a serem controlados, estabelece esquemas de identificação para os itens e suas versões e estabelece as ferramentas e técnicas a serem utilizadas na aquisição e na administração de itens controlados. Essas atividades constituem a base para as outras atividades do SCM.

2.1. Identificando itens a serem controlados
[2 *, c8s2.2] [4 *, c29s1.1]

Uma das primeiras etapas no controle da mudança é identificar os itens de software a serem controlados. Isso envolve a compreensão da configuração do software no contexto da configuração do sistema, a seleção de itens de configuração de software, o desenvolvimento de uma estratégia para rotular itens de software e a descrição de suas relações e identificar as linhas de base a serem usadas e o procedimento para a aquisição dos itens.

2.1.1. Configuração do software
[1, c3]

A configuração do software é as características funcionais e físicas do hardware ou software, conforme estabelecido na documentação técnica ou alcançado em um produto. Ele pode ser visto como parte de uma configuração geral do sistema.

2.1.2. Item de configuração de software
[4 *, c29s1.1]

Um item de configuração (IC) é um item ou agregação de hardware ou software ou ambos projetados para serem gerenciados como uma única entidade. Um item de configuração de software (SCI) é uma entidade de software que foi estabelecida como um item de configuração [1]. O SCM geralmente controla uma variedade de itens, além do próprio código. Itens de software com
Potencial para se tornarem SCIs incluem planos, especificações e documentação de projeto, materiais de teste, ferramentas de software, código fonte e executável, bibliotecas de código, dicionários de dados e dados e documentação para instalação, manutenção, operações e uso de software.

A seleção de SCIs é um processo importante no qual um equilíbrio deve ser alcançado entre prover visibilidade adequada para fins de controle de projeto e fornecer um número gerenciável de itens controlados.

2.1.3. Item de configuração de software
Relacionamentos
[3 *, c7s4]

As relações estruturais entre os SCI selecionados e suas partes constituintes afetam outras atividades ou tarefas do SCM, como a criação de software ou a análise do impacto das mudanças propostas. O rastreamento adequado dessas relações também é importante para apoiar a rastreabilidade. A concepção do esquema de identificação para SICs deve considerar a necessidade de mapear itens identificados para a estrutura de software, bem como a necessidade de apoiar a evolução dos itens de software e suas relações.

[ Figura 6.2. Aquisição de Itens ]

2.1.4. Versão do software
[1, c3] [4 *, c29s3]

Os itens de software evoluem à medida que um projeto de software prossegue. Uma versão de um item de software é uma instância identificada de um item. Pode ser pensado como um estado de um item em evolução. Uma variante é uma versão de um programa resultante da aplicação da diversidade de software.

2.1.5. Linha de base
[1, c3]

Uma linha de base de software é uma versão formalmente aprovada de um item de configuração (independentemente da mídia) formalmente designada e fixa em um momento específico durante o ciclo de vida do item de configuração. O termo também é usado para se referir a uma versão específica de um item de configuração de software que foi acordado. Em ambos os casos, a linha de base só pode ser alterada através de procedimentos formais de controle de mudança. Uma linha de base, juntamente com todas as alterações aprovadas à linha de base, representa a configuração aprovada atual.

As linhas de base comumente usadas incluem funcional, alocada, de desenvolvimento e produto
Linhas de base. A linha de base funcional corresponde aos requisitos do sistema analisados. A linha de base alocada corresponde à especificação de requisitos de software revistos e à especificação de requisitos de interface de software. A linha de base de desenvolvimento representa a evolução da configuração do software em
Ciclo de vida do software. A autoridade de alteração para essa linha de base geralmente depende basicamente da organização de desenvolvimento, mas pode ser compartilhada com outras organizações (por exemplo, SCM ou Teste). A linha de base do produto corresponde ao produto de software concluído para a integração do sistema. As linhas de base a serem usadas para um determinado projeto, juntamente com os níveis de autoridade associados necessários para a aprovação da mudança, são tipicamente identificadas no SCMP.

2.1.6. Adquirir itens de configuração de software
[3 *, c18]

Os itens de configuração de software são colocados sob o controle SCM em momentos diferentes; Isto é, eles são incorporados em uma linha de base particular em um ponto específico no ciclo de vida do software. O evento desencadeante é a conclusão de alguma forma de tarefa de aceitação formal, como uma revisão formal. A Figura 6.2 caracteriza o crescimento dos itens
O ciclo de vida prossegue. Esta figura é baseada no modelo de cachoeira para fins de ilustração apenas; Os índices utilizados na figura indicam versões dos itens em evolução. A solicitação de mudança de software (SCR) é descrita na seção 3.1.

Na aquisição de um SIC, sua origem e integridade inicial devem ser estabelecidas. Após a aquisição de um SIC, as alterações do item devem ser formalmente aprovadas conforme apropriado para o SCI e a linha de base envolvida, conforme definido no SCMP. Após a aprovação, o item é incorporado na linha de base do software de acordo com o procedimento apropriado.

2.2. Biblioteca de software
[3 *, c1s3] [4 *, c29s1.2]

Uma biblioteca de software é uma coleção controlada de software e documentação relacionada projetada para auxiliar no desenvolvimento, uso ou manutenção de software [1]. Ele também é instrumental na gestão de lançamento de software e atividades de entrega. Vários tipos de bibliotecas podem ser usados, cada um correspondendo ao nível particular de maturidade do item de software. Por exemplo, uma biblioteca de trabalho poderia suportar codificação e uma biblioteca de suporte de projeto poderia suportar testes, enquanto uma biblioteca principal poderia ser usada para produtos acabados. Um nível apropriado de controle de SCM (linha de base associada e nível de autoridade para a mudança) está associado a cada biblioteca. A segurança, em termos de controle de acesso e as facilidades de backup, é um aspecto chave do gerenciamento de bibliotecas.

A (s) ferramenta (s) utilizada (s) para cada biblioteca deve suportar as necessidades de controle SCM para aquela biblioteca, tanto em termos de controle de SCIs como de controle do acesso à biblioteca. No nível de biblioteca de trabalho, este é um recurso de gerenciamento de código que atende a desenvolvedores, mantenedores e SCM. Ele é focado em gerenciar as versões de itens de software, apoiando as atividades de vários desenvolvedores. Em níveis mais altos de controle, o acesso é mais restrito e o SCM é o usuário principal.

Estas bibliotecas são também uma importante fonte de informação para medições de trabalho e progresso.

3. Controle de Configuração do Software
[2 *, c9] [4 *, c29s2]

O controle de configuração do software está relacionado ao gerenciamento de alterações durante o ciclo de vida do software. Abrange o processo de determinação das alterações a introduzir, a autoridade para aprovar determinadas alterações, o apoio à implementação dessas alterações eo conceito de desvios formais em relação aos requisitos do projecto, bem como
Renúncias deles. As informações derivadas dessas atividades são úteis na medição de tráfego de mudança e quebra, bem como aspectos de retrabalho.

3.1. Solicitando, avaliando e aprovando alterações de software
[2 *, c9s2.4] [4 *, c29s2]

O primeiro passo no gerenciamento de mudanças em itens controlados é determinar quais mudanças devem ser feitas. O processo de solicitação de mudança de software (ver um fluxo típico de um processo de solicitação de mudança na Figura 6.3) fornece procedimentos formais para submeter e registrar solicitações de mudança, avaliar o custo e impacto potencial de uma alteração proposta e aceitar, modificar, adiar ou rejeitar o pedido. Proposta. Uma solicitação de alteração (CR) é uma solicitação para expandir ou reduzir o escopo do projeto; Modificar políticas, processos, planos ou procedimentos; Modificar custos ou orçamentos; Ou revisar cronogramas [1]. As solicitações de alterações nos itens de configuração do software podem ser originadas por qualquer pessoa em qualquer ponto do ciclo de vida do software e podem incluir
Uma solução sugerida e solicitou prioridade. Uma fonte de CR é o início de ações corretivas em resposta a relatórios de problemas. Independentemente da fonte, o tipo de alteração (por exemplo, defeito ou realce) é normalmente gravado no Software CR (SCR).

Isso fornece uma oportunidade para monitorar defeitos e coletar medições de atividade de mudança por tipo de alteração. Uma vez que um SCR é recebido, uma avaliação técnica (também conhecida como análise de impacto) é realizada para
As modificações que seriam necessárias se o pedido de alteração fosse aceito. Uma boa compreensão das relações entre os itens de software (e, possivelmente, de hardware) é importante para esta tarefa. Finalmente, uma autoridade estabelecida - proporcional à linha de base afetada, ao SCI envolvido e à natureza da mudança - avaliará os aspectos técnicos e gerenciais do pedido de mudança e aceitará, modificará, rejeitará ou adiará a alteração proposta.

[ Figura 6.3. Fluxo de um Processo de Controle de Mudança ]

3.1.1. Placa de controle de configuração de software
[2 *, c9s2.2] [3 *, c11s1] [4 *, c29s2]

A autoridade para aceitar ou rejeitar as alterações propostas cabe a uma entidade normalmente conhecida como CCB (Configuration Control Board). Em projetos menores, esta autoridade pode realmente residir com o líder ou um indivíduo designado em vez de um
Multiperson board. Pode haver níveis múltiplos de autoridade de mudança dependendo de uma variedade de critérios - como a criticidade do item envolvido, a natureza da mudança (por exemplo, impacto no orçamento e cronograma) ou o ponto atual do projeto no ciclo de vida. A composição dos CCBs usados ​​para um determinado sistema varia dependendo desses critérios (um representante do SCM estaria sempre presente). Todos os interessados, adequados ao nível do CCB, estão representados. Quando o escopo de autoridade de um CCB é estritamente software, é conhecido como um Software Configuration Control Board (SCCB). As atividades do CCB estão tipicamente sujeitas a auditoria ou revisão de qualidade de software.

3.1.2. Processo de Solicitação de Mudança de Software
[3 *, c1s4, c8s4]

Um processo efetivo de solicitação de mudança de software (SCR) requer o uso de ferramentas e procedimentos de suporte para originar solicitações de alteração, reforçar o fluxo do processo de mudança, capturar decisões de CCB e reportar informações de processo de mudança. Uma ligação entre essa capacidade de ferramenta e o sistema de relatório de problemas pode facilitar o rastreamento de soluções para problemas relatados.

3.2. Implementando alterações de software
[4 *, c29]

Os SCRs aprovados são implementados usando os procedimentos de software definidos de acordo com os requisitos de cronograma aplicáveis. Uma vez que vários SCR aprovados podem ser implementados simultaneamente, é necessário fornecer um meio para rastrear quais SCRs são incorporados em versões de software e linhas de base específicas. Como parte do encerramento do processo de alteração, as alterações concluídas podem ser submetidas a auditorias de configuração e verificação da qualidade do software - o que inclui garantir que somente as alterações aprovadas tenham sido feitas. O processo de solicitação de mudança de software descrito acima normalmente documentará as informações de aprovação do SCM (e
alterar.

As alterações podem ser suportadas por ferramentas de controle de versão de código-fonte. Essas ferramentas permitem que uma equipe de engenheiros de software, ou um único engenheiro de software, acompanhe e documente mudanças no código-fonte. Essas ferramentas fornecem um repositório
O código-fonte, pode impedir que mais de um engenheiro de software edite o mesmo módulo ao mesmo tempo e registre todas as alterações feitas no código-fonte. Os engenheiros de software verificam os módulos fora do repositório, fazem alterações, documentam as alterações e, em seguida, salvam os módulos editados no repositório. Se necessário, as alterações também podem ser descartadas, restaurando uma linha de base anterior. Ferramentas mais poderosas podem suportar ambientes de desenvolvimento paralelo e geograficamente distribuídos. Essas ferramentas podem se manifestar como aplicações separadas e especializadas sob o controle de um grupo SCM independente. Eles também podem aparecer como parte integrante do ambiente de engenharia de software. Finalmente, eles podem ser tão elementar como um sistema de controle de mudança rudimentar fornecido com um sistema operacional.

3.3. Desvios e renúncias
[1, c3]

As restrições impostas a um esforço de engenharia de software ou as especificações produzidas durante as atividades de desenvolvimento podem conter disposições que não podem ser satisfeitas no ponto designado no ciclo de vida. Um desvio é uma autorização escrita, concedida antes do fabrico de um artigo, para afastar-se de um determinado desempenho ou exigência de concepção para um número específico de unidades ou um período de tempo específico. Uma renúncia é uma autorização por escrito para aceitar um item de configuração ou outro item designado que é encontrado, durante a produção ou depois de ter sido submetido para inspeção, para se afastar de requisitos especificados, mas é, no entanto, considerado adequado para uso como é ou após retrabalho por um aprovado Método. Nesses casos, um processo formal é usado para obter aprovação para desvios ou isenções das provisões.

4. Contabilidade de status da configuração do software
[2 *, c10]

A contabilidade de status de configuração de software (SCSA) é um elemento de gerenciamento de configuração que consiste na gravação e no relatório de informações necessárias para gerenciar uma configuração de forma eficaz.

4.1. Informações sobre o status da configuração do software
[2 *, c10s2.1]

A atividade do SCSA projeta e opera um sistema para capturar e relatar as informações necessárias à medida que o ciclo de vida prossegue. Como em qualquer sistema de informação, as informações de status de configuração a serem gerenciadas para as configurações em evolução devem ser identificadas, coletadas e mantidas. Várias informações e medições são necessárias para suportar o processo de SCM e atender às necessidades de relatórios de status de configuração de gerenciamento, engenharia de software e outras atividades relacionadas. Os tipos de informação disponíveis incluem a identificação de configuração aprovada, bem como a identificação e status de implementação atual de alterações, desvios e dispensas.

Alguma forma de suporte automatizado de ferramentas é necessária para realizar as tarefas de coleta e relatório de dados do SCSA; Isso pode ser uma capacidade de banco de dados, uma ferramenta autônoma ou uma capacidade de um ambiente de ferramenta maior e integrado.

4.2. Relatórios de Status de Configuração de Software
[2 *, c10s2.4] [3 *, c1s5, c9s1, c17]

As informações relatadas podem ser usadas por vários elementos organizacionais e de projeto - incluindo a equipe de desenvolvimento, a equipe de manutenção, gerenciamento de projetos e atividades de qualidade de software. Os relatórios podem assumir a forma de consultas ad hoc para responder a perguntas específicas ou a produção periódica de relatórios pré-concebidos. Algumas informações produzidas pela atividade de contabilidade de status durante o curso do ciclo de vida podem se tornar registros de garantia de qualidade.

Além de relatar o status atual da configuração, as informações obtidas pelo SCSA podem servir como base para várias medições. Exemplos incluem o número de solicitações de mudança por SIC eo tempo médio necessário para
Implementar uma solicitação de alteração.

5. Auditoria de Configuração de Software
[2 *, c11]

Uma auditoria de software é um exame independente de um produto de trabalho ou conjunto de produtos de trabalho para avaliar o cumprimento de especificações, padrões, acordos contratuais ou outros critérios [1]. As auditorias são conduzidas de acordo com um
Processo que consiste em vários papéis e responsabilidades do auditor. Consequentemente, cada auditoria deve ser cuidadosamente planeada. Uma auditoria pode exigir um número de indivíduos para executar uma variedade de tarefas ao longo de um período de tempo bastante curto. Ferramentas para apoiar o planejamento e condução de uma auditoria podem facilitar muito o processo.

A auditoria de configuração do software determina a extensão em que um item satisfaz as características funcionais e físicas necessárias. As auditorias informais deste tipo podem ser realizadas em pontos-chave do ciclo de vida. Podem ser necessários dois tipos de auditorias formais pelo contrato de gestão (por exemplo, nos contratos que abrangem software crítico):
Auditoria de Configuração Funcional (FCA) e Auditoria de Configuração Física (PCA). A conclusão bem-sucedida dessas auditorias pode ser um pré-requisito para o estabelecimento da linha de base do produto.

5.1. Auditoria de configuração funcional do software
[2 *, c11s2.1]

O objetivo do software FCA é garantir que o item de software auditado seja consistente com suas especificações de funcionamento. A saída das atividades de verificação e validação de software (ver Verificação e Validação no KA de Qualidade de Software) é uma entrada chave para esta auditoria.

5.2. Auditoria de Configuração Física de Software
[2 *, c11s2.2]

O objetivo da auditoria de configuração física do software (PCA) é garantir que a documentação de design e referência seja consistente com o produto de software construído.

5.3. Auditorias em processo de uma linha de base de software
[2 *, c11s2.3]

Como mencionado acima, as auditorias podem ser realizadas durante o processo de desenvolvimento para investigar o status atual de elementos específicos da configuração. Nesse caso, uma auditoria poderia ser aplicada a itens de linha de base amostrados para garantir que o desempenho é consistente com as especificações ou para garantir que a evolução da documentação continue
Ser consistente com o item de linha de base em desenvolvimento.

6. Gerência e entrega da liberação do software
[2 *, c14] [3 *, c8s2]

Neste contexto, release refere-se à distribuição de um item de configuração de software fora da atividade de desenvolvimento; Isso inclui lançamentos internos, bem como a distribuição aos clientes. Quando diferentes versões de um item de software estão disponíveis para entrega (como versões para diferentes plataformas ou versões com capacidades variadas), é
Freqüentemente necessário para recriar versões específicas e empacotar os materiais corretos para entrega da versão. A biblioteca de software é um elemento chave na realização de tarefas de lançamento e entrega.

6.1. Construção de Software
[4 *, c29s4]

A criação de software é a atividade de combinar as versões corretas de itens de configuração de software, usando os dados de configuração apropriados, em um programa executável para entrega a um cliente ou outro destinatário, como a atividade de teste. Para sistemas com hardware ou firmware, o programa executável é entregue à atividade de construção do sistema. As instruções de compilação garantem que os passos de compilação adequados sejam executados na seqüência correta. Além de criar software para novos lançamentos, geralmente também é necessário que o SCM tenha a capacidade de reproduzir versões anteriores para fins de recuperação, teste, manutenção ou liberação adicional.

O software é construído usando versões específicas de ferramentas de suporte, como compiladores (consulte Compilador Basics na Computação Fundações KA). Pode ser necessário recriar uma cópia exata de um item de configuração de software previamente criado. Neste caso, as ferramentas de suporte e as instruções de compilação associadas precisam estar sob o controle do SCM para
Garantir a disponibilidade das versões corretas das ferramentas.

Um recurso de ferramenta é útil para selecionar as versões corretas de itens de software para um determinado ambiente de destino e para automatizar o processo de construção do software a partir das versões selecionadas e dados de configuração apropriados. Para projetos com ambientes de desenvolvimento paralelos ou distribuídos, essa capacidade de ferramenta é necessária. A maioria dos ambientes de engenharia de software fornece essa capacidade. Essas ferramentas variam em complexidade de exigir que o engenheiro de software aprenda uma linguagem de script especializada para abordagens orientadas a gráficos que escondam grande parte da complexidade de
Uma instalação de construção "inteligente".

O processo de construção e os produtos são freqüentemente sujeitos a verificação de qualidade do software. As saídas do processo de compilação podem ser necessárias para referência futura e podem se tornar registros de garantia de qualidade.

6.2. Gerenciamento de versões de software
[4 *, c29s3.2]

A gestão de liberação de software abrange a identificação, o empacotamento e a entrega dos elementos de um produto - por exemplo, um programa executável, documentação, notas de versão e dados de configuração. Dado que as alterações do produto
Pode ocorrer em uma base contínua, uma preocupação para gerenciamento de lançamento é determinar quando para emitir uma liberação. A gravidade dos problemas abordados pela liberação e as medições das densidades de falhas de versões anteriores afetam esta decisão. A tarefa de embalagem deve identificar quais itens do produto devem ser entregues e, em seguida, selecionar as variantes corretas desses itens, dada a aplicação pretendida do produto. As informações que documentam o conteúdo físico de um release são conhecidas como um documento de descrição de versão. As notas de lançamento descrevem tipicamente novas capacidades, conhecidas
Problemas e requisitos de plataforma necessários para o bom funcionamento do produto. O pacote a ser liberado também contém instruções de instalação ou atualização. O último pode ser complicado pelo fato de que alguns usuários atuais podem ter versões que são vários lançamentos antigos. Em alguns casos, o gerenciamento de releases pode ser necessário para rastrear a distribuição do produto a vários clientes ou sistemas de destino - por exemplo, no caso em que o fornecedor foi obrigado a notificar um cliente de problemas recentemente relatados. Finalmente, um mecanismo para garantir a integridade do item liberado pode ser implementado - por exemplo, liberando uma assinatura digital com ele.

Um recurso de ferramenta é necessário para suportar essas funções de gerenciamento de release. É útil ter uma conexão com a capacidade da ferramenta que suporta o processo de solicitação de mudança, a fim de mapear o conteúdo da liberação para os SCRs que foram recebidos. Esse recurso de ferramenta também pode manter informações sobre várias plataformas de destino e em vários ambientes de clientes.

7. Ferramentas de Gerenciamento de Configuração de Software
[3 *, c26s1] [4 *, c8s2]

Ao discutir ferramentas de gerenciamento de configuração de software, é útil classificá-las. As ferramentas SCM podem ser divididas em três classes em termos do escopo em que eles fornecem suporte: suporte individual, suporte ao projeto e suporte ao processo da empresa.

Ferramentas de suporte individuais são apropriadas e normalmente suficientes para pequenas organizações ou grupos de desenvolvimento sem variantes de seus produtos de software ou outros requisitos complexos de SCM. Eles incluem:

• Ferramentas de controle de versão: acompanhar, documentar e armazenar itens de configuração individuais, como código-fonte e documentação externa.

• Criar ferramentas de manipulação: em sua forma mais simples, essas ferramentas compilar e vincular uma versão executável do software. Ferramentas de construção mais avançadas extraem a versão mais recente do software de controle de versão, executam verificações de qualidade, executam testes de regressão e produzem várias formas de relatórios, entre outras tarefas.

• Ferramentas de controle de mudanças: apoiam principalmente o controle de solicitações de mudança e notificação de eventos (por exemplo, mudanças de status de solicitação de mudança, metas alcançadas).

As ferramentas de suporte relacionadas ao projeto apoiam principalmente o gerenciamento do espaço de trabalho para equipes de desenvolvimento e integradores; Eles normalmente são capazes de suportar ambientes de desenvolvimento distribuídos. Tais ferramentas são apropriadas para organizações de médio a grande porte com variantes de seus produtos de software e desenvolvimento paralelo, mas sem requisitos de certificação.

As ferramentas de suporte ao processo da empresa podem normalmente automatizar partes de um processo de toda a empresa, fornecendo suporte para gerências de fluxo de trabalho, funções e responsabilidades. Eles são capazes de lidar com muitos itens, dados e ciclos de vida. Tal
Ferramentas adicionais para o apoio ao projeto, apoiando um processo de desenvolvimento mais formal, incluindo os requisitos de certificação.

LEITURAS ADICIONAIS

Stephen P. Berczuk and Brad Appleton,
Software Configuration Management Patterns: Effective Teamwork, Practical Integration [6].
[Padrões de Gerenciamento de Configuração de Software: Trabalho em Equipe Eficaz, Integração Prática]

Este livro expressa útil SCM práticas e estratégias como padrões. Os padrões podem ser implementados usando várias ferramentas, mas eles são expressos de forma agnóstica.

"CMMI for Development", Versão 1.3, pp. 137-147 [7].

Este modelo apresenta uma coleção de melhores práticas para ajudar as organizações de desenvolvimento de software a melhorar seus processos. No nível de maturidade 2, sugere atividades de gerenciamento de configuração.

REFERÊNCIAS

[1] ISO/IEC/IEEE 24765:2010 Systems and Software Engineering—Vocabulary, ISO/IEC/IEEE, 2010.
[Engenharia de Sistemas e Software - Vocabulário]

[2*] IEEE Std. 828-2012, Standard for Configuration Management in Systems and Software Engineering, IEEE, 2012.
[Padrão para Gerenciamento de Configuração em Sistemas e Engenharia de Software]

[3*] A.M.J. Hass, Configuration Management Principles and Practices, 1st ed., Addison-Wesley, 2003.
[Princípios e Práticas de Gerenciamento de Configuração]

[4*] I. Sommerville, Software Engineering, 9th ed., Addison-Wesley, 2011.
[Engenharia de Software]

[5*] J.W. Moore, The Road Map to Software Engineering: A Standards-Based Guide, Wiley-IEEE Computer Society Press, 2006.
[The Road Map para Engenharia de Software: Um Guia Baseado em Padrões]

[6] S.P. Berczuk and B. Appleton, Software Configuration Management Patterns: Effective Teamwork, Practical Integration,Addison-Wesley Professional, 2003.
[Padrões de Gerenciamento de Configuração de Software: Trabalho em Equipe Eficaz, Integração Prática]

[7] CMMI Product Team, “CMMI for Development, Version 1.3,” Software Engineering Institute, 2010;
["CMMI para o Desenvolvimento, Versão 1.3,"]
http://resources.sei.cmu.edu/library/asset-view.cfm?assetID=9661.

